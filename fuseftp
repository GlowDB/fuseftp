#!/usr/bin/perl -w
#
#    Copyright 2005, Marcus Thiesen (marcus@thiesen.org) All rights reserved.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of either:
#
#    a) the GNU General Public License as published by the Free Software
#    Foundation; either version 1, or (at your option) any later
#       version, or
#
#    b) the "Artistic License" which comes with Perl.
#
#    On Debian GNU/Linux systems, the complete text of the GNU General
#    Public License can be found in `/usr/share/common-licenses/GPL' and
#    the Artistic Licence in `/usr/share/common-licenses/Artistic'.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
#
#########################################################################
#
# A userspace filesystem for ftp transfer
# Usage: fuseftp mountpoint [user[:password]@]host &
# 
# Prereq: Fuse, Net::FTP, Cache::File
# Version: 0.2
# 
#########################################################################

use strict;
use warnings;

#core
use POSIX qw(:errno_h :fcntl_h);
use File::Spec::Functions;

#preregs
use Net::FTP;
use Fuse;
use Cache::File;

use constant DEBUG => 0;
use constant TIMEOUT => '5 min';

our $VERSION;

$VERSION = '0.2';

#initial stuff
my $basedir = catdir($ENV{HOME},'.fuseftp');
mkdir $basedir unless -d $basedir;
my $filecache = new Cache::File( cache_root => $basedir,
				 default_expires => TIMEOUT );

#get command line arguments
my $mountpoint = shift;
my $server = shift;

unless (defined $mountpoint && defined $server) {
    print("$0 mountpoint [user[:password]@]host\n");
    exit 1;
}

#split them
my ($username, $password, $host);
if ($server =~ /(([^:]+):)?(([^@]+)@)?(.+)/) {
    if ($1) {
	$username = $2;
	$password = $4;
    } else {
	$username = $4;
    }
    $host = $5;
}

#make the connection
my $ftp = new Net::FTP($host) or 
    die "Can't connect to $host: $@\n";


die "Mountpoint $mountpoint does not exist or is busy\n" if (!-d $mountpoint);

$ftp->login($username, $password) or
    die "Can't login: $@";

$ftp->binary;

print "Successfully logged into $host\n"; 

my %attr_cache = ();
my %type_cache = ( '/' =>  'd' );
my %dir_seen = ();
my %file_obj = ();
my %link_cache = ();

#subs
sub ftp_getdir {
    my $dir = shift;
    print "called catdir for '$dir'\n" if DEBUG;
    $ftp->cwd($dir);

    my @files = $ftp->ls();

    map { $_ =~ s|^/|| } @files;

    return (@files, 0);
}

sub ftp_getattr {
    my $filename = shift;

    if (!exists $attr_cache{$filename}) {
	my $base = '/';

	if ($filename =~ m|(^/.+/).+|) {
	    $base = $1;
	}

	$ftp->cwd($base);

	if (! exists $dir_seen{$base} ) {
	    my @entries = $ftp->dir($base);
	    my @files = $ftp->ls($base);
	    my $file = shift @files;
	    my $entry = shift @entries;;
	    while ($file && $entry) {
		$file =~ s|/+|/|g;
		$type_cache{$file} = substr $entry, 0, 1;
		print("type for $file is " . $type_cache{$file} . "\n") if DEBUG;
		$file = shift @files;
		$entry = shift @entries;;
	    }
	    $dir_seen{$base}++;
	}

	if ((!$type_cache{$filename}) && $filename ne '/') {
	    $attr_cache{$filename} = undef;
	    print "no entry for $filename\n" if DEBUG;
	    return -ENOENT();
	}

	my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
	    $atime,$mtime,$ctime,$blksize,$blocks);

	my $type = 0100;
	my $modebits = 0666;
	if ($type_cache{$filename} eq 'd') {
	    $type = 0040;
	    $modebits = 0755;
	}
	if ($type_cache{$filename} eq 'l') {
	    $type = 0120
	}

	$mode = ($type << 9) + $modebits;

	$nlink = 1;
	$uid = $<;

	($gid) = split / /, $(;

	$rdev = 0;

	$atime = $ftp->mdtm($filename);
	$atime = time unless defined $atime;

	$size = $ftp->size($filename);
	$size = 0 unless defined $size;

	$mtime = $atime;
	$ctime = $atime;
	$blksize = 1024;
	$blocks = 1;

	$dev = 0;
	$ino = 0;

	print "returning attr for $filename\n" if DEBUG;
	
	$attr_cache{$filename} = [$dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
		$atime,$mtime,$ctime,$blksize,$blocks];

	return ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
		$atime,$mtime,$ctime,$blksize,$blocks);
    } else {
	print "returning attr for $filename (cached)\n" if DEBUG;
	if (defined $attr_cache{$filename}) {
	    return @{$attr_cache{$filename}};
	} else {
	    return -ENOENT();
	}
    }

}

sub ftp_rename {
    my $oldname = shift;
    my $newname = shift;

    if ($ftp->rename($oldname, $newname)) {
	return 0;
    } else {
	return -EIO();
    }
}

sub ftp_open {
    my $file = shift;
    my $flags = shift;

    print "open: $file\n" if DEBUG;

    if ($flags & (O_WRONLY | O_APPEND)) {
	print("opening $file for WRONLY | APPEND\n") if DEBUG;
	$file_obj{$file} = $ftp->stor($file);
	if ($file_obj{$file}) {
	    return 0;
	} else {
	    print("opening failed\n") if DEBUG;
	    return -ENOENT();
	}
    }

    if ($flags & (O_WRONLY)) {
	print("opening $file for WRONLY\n") if DEBUG;
	$file_obj{$file} = $ftp->stor($file);
	if ($file_obj{$file}) {
	    return 0;
	} else {
	    print("opening failed\n") if DEBUG;
	    return -ENOENT();
	}
    }

    print("opening $file for read\n") if DEBUG;
    $file_obj{$file} = $ftp->retr($file);
    if ($file_obj{$file}) {
	return 0;
    } else {
	print("opening failed\n") if DEBUG;
	return -ENOENT();
    }


    return -ENOENT();
}

sub __read {
    my $file = shift;
    my $size = shift;

    my $retval = "";
    my $buffer = "";
    my $read = 0;
    my $oldread = 0;
    while ($read < $size) {
	$oldread = $read;
	$read += $file_obj{$file}->read($buffer, $size);
	last if ($read == $oldread);
	$retval .= $buffer;
    }
    return $retval;
}

sub ftp_read {
    my $file = shift;
    my $size = shift;
    my $offset = shift;

    print "read: $file\n" if DEBUG;
    if (!$file_obj{$file}) {
	return -EIO();
    }
    
    my $data = "";
    if ($filecache->get( $file )) {
	$data = $filecache->get( $file );

	if (length($file) < $offset + $size) {
	    $data = __read($file, $offset + $size);
	} 
    } else {
	$data = __read($file, $offset + $size);
    }

    $filecache->set($file, $data, TIMEOUT);
    return substr($data, $offset, $size);
}

sub ftp_release {
    my $file = shift;

    print("release $file\n") if DEBUG;

    if ($file_obj{$file}) {
	$file_obj{$file}->close;
	delete $file_obj{$file};
	return 0;
    } else {
	warn "Trying to close not open file $file\n";
	return -EIO();
    }
}

sub ftp_readlink {
    my $file = shift;
    my $dir;

    if (!exists $link_cache{$file}) {
	print "readlink: $file\n" if DEBUG;

	if ($file =~ m|(^/.+/).+|) {
	    $dir = $1;
	}
	$dir = '/' unless $dir;

	my @lines = $ftp->dir($dir);

	my $cfile = $file;
	$cfile =~ s|^/||;

	foreach my $line (@lines) {
	    print $line . "\n" if DEBUG;
	    if ($line =~ $cfile) {
		my ($link,$target) = split /\s*->\s*/, $line;
		$link_cache{$file} = $target;
		return $target;
	    }
	}
	return -EIO();
    } else {
	return $link_cache{$file};
    }
}

sub ftp_unlink {
    my $file = shift;

    print "delete $file\n" if DEBUG;

    if ($ftp->delete($file)) {
	delete $dir_seen{$file};
	delete $type_cache{$file};
	return 0; 
    } else {
	return -EIO();
    }
}

sub ftp_rmdir {
    my $dir = shift;

    if ($ftp->rmdir($dir)) {
	delete $dir_seen{$dir};
	delete $type_cache{$dir};
	return 0;
    } else {
	return -EIO();
    }
}

sub ftp_mkdir {
    my $dir = shift;

    if ($ftp->mkdir($dir)) {
	delete $dir_seen{$dir};
	delete $type_cache{$dir};
	return 0;
    } else {
	return -EIO();
    }
}

sub ftp_write {
    my $file = shift;
    my $buffer = shift;
    my $offset = shift;

    my $data = $filecache->get($file);
    $data = "" unless defined $data;

    if (length($data) < $offset) {
	#retrieve the whole file
	$data = __read($file, $ftp->size($file));
    }

    substr $data, $offset, length($buffer), $buffer;

    $filecache->set($file, $data, 'never');
}

sub ftp_flush {
    my $file = shift;

    print "flush: $file\n" if DEBUG;

    my $data = $filecache->get($file);
    if ($file_obj{$file}) {
	if ($data) {
	    print("writing buffer is :$data:\n") if DEBUG;
	    $file_obj{$file}->write($data, length($data));
	}
	$filecache->remove($file);
	delete $attr_cache{$file};
	$type_cache{$file} = 'f';
	my ($dir) = $file =~ m|(.+)/.+|;
	delete $dir_seen{$dir} if $dir;
	return 0;
    } else {
	warn "Trying to flush not open file $file\n";
	return -EIO();
    }
}

sub ftp_mknod{
    my $file = shift;
    my $mode = shift;
    my $device = shift;

    ftp_open($file, O_WRONLY);
    ftp_write($file, "", 0);
    ftp_flush($file);
    ftp_release($file);
}

#run fuse
Fuse::main(mountpoint => $mountpoint,

	   getdir => \&ftp_getdir,
	   getattr => \&ftp_getattr,
	   open => \&ftp_open,
	   read => \&ftp_read,
	   release => \&ftp_release,
	   readlink => \&ftp_readlink,
	   rename => \&ftp_rename,
	   unlink => \&ftp_unlink,
	   rmdir => \&ftp_rmdir,
	   mkdir => \&ftp_mkdir,
	   write => \&ftp_write,
	   flush => \&ftp_flush,
	   mknod => \&ftp_mknod,
	   );

